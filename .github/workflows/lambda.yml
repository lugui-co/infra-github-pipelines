name: deploy lambda lambda_docker

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true

jobs:
  deploy:
    environment:
      name: ${{ inputs.environment }}

    runs-on: ubuntu-22.04

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ secrets.FETCH_TOKEN }}

      - name: deploy
        env:
          ACCOUNT_FAMILY: ${{ vars.ACCOUNT_FAMILY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SERVICE_NAME: ${{ vars.SERVICE_NAME }}
          GO_TO_DIR: ${{ vars.GO_TO_DIR }}
          CI_JOB_TOKEN: ${{ secrets.FETCH_TOKEN }}
          SERVICE_NAME_ENV_SUFIX: ${{ vars.SERVICE_NAME_ENV_SUFIX }}

        run: |
          export CI_COMMIT_BRANCH=${GITHUB_REF_NAME}

          export CI_PROJECT_NAME=$(echo "${GITHUB_REPOSITORY}" | awk -F / '{print $2}')

          if [ -x "$(command -v apt-get)" ]; then
            apt-get update && apt-get install -y awscli
          fi

          if [ -x "$(command -v apk)" ]; then
            apk add aws-cli
          fi

          # BEGIN carregando chaves

          mkdir ~/.aws
          touch ~/.aws/credentials

          aws ssm get-parameters --names "/cicd/${ACCOUNT_FAMILY}/credentials" --with-decryption --query "Parameters[0].Value" --output text > ~/.aws/credentials

          if [ "$(cat ~/.aws/credentials)" == "null" ] && [ "$(cat ~/.aws/credentials)" == "None" ]; then
            echo "nao achei as credenciais da aws."

            echo "o ambiente esta configurado certo?"

            echo "verifique a variavel de ambiente ACCOUNT_FAMILY"

            exit 1
          fi

          export AWS_PROFILE=${CI_COMMIT_BRANCH}

          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY

          export region_candidate=$(aws ssm get-parameters --names "/cicd/account/region/${CI_COMMIT_BRANCH}" --with-decryption --query "Parameters[0].Value" --output text)

          if [ "${region_candidate}" != "null" ] && [ "${region_candidate}" != "None" ]; then
            export AWS_DEFAULT_REGION=${region_candidate}

          else
            export region_candidate=$(aws ssm get-parameters --names "/cicd/account/region" --with-decryption --query "Parameters[0].Value" --output text)

            if [ "${region_candidate}" != "null" ] && [ "${region_candidate}" != "None" ]; then
              export AWS_DEFAULT_REGION=${region_candidate}
            fi
          fi

          # END carregando chaves

          if [ -z "${GO_TO_DIR}" ]; then
              export GO_TO_DIR="."
          fi

          if [ -z "${SERVICE_NAME}" ]; then
              export SERVICE_NAME=${CI_PROJECT_NAME}
          fi

          if [ "${SERVICE_NAME_ENV_SUFIX}" == "true" ]; then
              export SERVICE_NAME="${SERVICE_NAME}-${CI_COMMIT_BRANCH}"
          fi

          export ECR_REGISTRY_ADDRESS=$(aws ecr describe-repositories | grep repositoryUri | awk '{print $2}' | sed -e 's/\"\(.*\)\"\,/\1/' | grep ${SERVICE_NAME})

          aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY_ADDRESS}

          export TIMESTAMP=$(date +%s)

          cd ${GO_TO_DIR}

          docker build -t "${ECR_REGISTRY_ADDRESS}:latest" --build-arg CI_JOB_TOKEN="${CI_JOB_TOKEN}" .

          docker image tag "${ECR_REGISTRY_ADDRESS}:latest" "${ECR_REGISTRY_ADDRESS}:${TIMESTAMP}"

          docker push ${ECR_REGISTRY_ADDRESS}:${TIMESTAMP} &
          docker push ${ECR_REGISTRY_ADDRESS}:latest &

          wait

          docker logout $ECR_REGISTRY_ADDRESS

          sleep 5

          aws lambda update-function-code --function-name ${SERVICE_NAME} --image-uri "${ECR_REGISTRY_ADDRESS}:latest"