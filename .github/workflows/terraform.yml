on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true

jobs:
  plan:
    runs-on: ubuntu-22.04

    env:
      ACCOUNT_FAMILY: ${{ vars.ACCOUNT_FAMILY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: setup_go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.4'

      - name: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: 'pypy3.10'

      - name: setup_node
        uses: actions/setup-node@v3
        with:
          node-version: '20.2.0'

      - name: setup_terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: plan

        run: |
            export CI_COMMIT_BRANCH=${GITHUB_REF_NAME}

            export CI_PROJECT_NAME=$(echo "${GITHUB_REPOSITORY}" | awk -F / '{print $2}')

            sudo apt-get update && sudo apt-get install -y awscli p7zip build-essential

            mkdir ~/.aws
            touch ~/.aws/credentials

            echo "oi"

            aws ssm get-parameters --names "/cicd/${ACCOUNT_FAMILY}/credentials" --with-decryption --query "Parameters[0].Value" --output text > ~/.aws/credentials

            if [ "$(cat ~/.aws/credentials)" == "null" ] && [ "$(cat ~/.aws/credentials)" == "None" ]; then
              echo "nao achei as credenciais da aws."

              echo "o ambiente esta configurado certo?"

              echo "verifique a variavel de ambiente ACCOUNT_FAMILY"

              exit 1
            fi

            export AWS_PROFILE=${CI_COMMIT_BRANCH}

            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY

            mkdir -p ./environments
            touch ./environments/${CI_COMMIT_BRANCH}.tfvars
            echo >> ./environments/${CI_COMMIT_BRANCH}.tfvars

            export params_candidate=$(aws ssm get-parameters --names "/cicd/account/tfvars/${CI_COMMIT_BRANCH}" --with-decryption --query "Parameters[0].Value" --output text)

            if [ "${params_candidate}" != "null" ] && [ "${params_candidate}" != "None" ]; then
              aws ssm get-parameters --names "/cicd/account/tfvars/${CI_COMMIT_BRANCH}" --with-decryption --query "Parameters[0].Value" --output text >> ./environments/${CI_COMMIT_BRANCH}.tfvars

            else
              export params_candidate=$(aws ssm get-parameters --names "/cicd/account/tfvars" --with-decryption --query "Parameters[0].Value" --output text)

              if [ "${params_candidate}" != "null" ] && [ "${params_candidate}" != "None" ]; then
                aws ssm get-parameters --names "/cicd/account/tfvars" --with-decryption --query "Parameters[0].Value" --output text >> ./environments/${CI_COMMIT_BRANCH}.tfvars
              fi
            fi

            export region_candidate=$(aws ssm get-parameters --names "/cicd/account/region/${CI_COMMIT_BRANCH}" --with-decryption --query "Parameters[0].Value" --output text)

            if [ "${region_candidate}" != "null" ] && [ "${region_candidate}" != "None" ]; then
              export AWS_DEFAULT_REGION=${region_candidate}

            else
              export region_candidate=$(aws ssm get-parameters --names "/cicd/account/region" --with-decryption --query "Parameters[0].Value" --output text)

              if [ "${region_candidate}" != "null" ] && [ "${region_candidate}" != "None" ]; then
                export AWS_DEFAULT_REGION=${region_candidate}
              fi
            fi

            terraform init -force-copy -input=false -backend-config bucket="lugui-terraform-states-${CI_COMMIT_BRANCH}" -backend-config dynamodb_table="lugui-terraform-states-${CI_COMMIT_BRANCH}" -backend-config shared_credentials_file=~/.aws/credentials -backend-config profile=${CI_COMMIT_BRANCH} -backend-config region=${AWS_DEFAULT_REGION}

            terraform workspace select ${CI_COMMIT_BRANCH} || terraform workspace new ${CI_COMMIT_BRANCH}

            terraform plan -out=tfplan.json -input=false -var-file ./environments/${CI_COMMIT_BRANCH}.tfvars


      - name: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          retention-days: 1
          compression-level: 9
          name: plano
          path: |
            ./tfplan.json

  apply:
    runs-on: ubuntu-22.04

    needs: plan

    environment:
      name: ${{ inputs.environment }}

    env:
      ACCOUNT_FAMILY: ${{ vars.ACCOUNT_FAMILY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: setup_go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.4'

      - name: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: 'pypy3.10'

      - name: setup_node
        uses: actions/setup-node@v3
        with:
          node-version: '20.2.0'

      - name: setup_terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: download_artifacts
        uses: actions/download-artifact@v4
        with:
          name: plano

      - name: apply

        run: |
            export CI_COMMIT_BRANCH=${GITHUB_REF_NAME}

            export CI_PROJECT_NAME=$(echo "${GITHUB_REPOSITORY}" | awk -F / '{print $2}')

            sudo apt-get update && sudo apt-get install -y awscli p7zip build-essential

            mkdir ~/.aws
            touch ~/.aws/credentials

            aws ssm get-parameters --names "/cicd/${ACCOUNT_FAMILY}/credentials" --with-decryption --query "Parameters[0].Value" --output text > ~/.aws/credentials

            if [ "$(cat ~/.aws/credentials)" == "null" ] && [ "$(cat ~/.aws/credentials)" == "None" ]; then
              echo "nao achei as credenciais da aws."

              echo "o ambiente esta configurado certo?"

              echo "verifique a variavel de ambiente ACCOUNT_FAMILY"

              exit 1
            fi

            export AWS_PROFILE=${CI_COMMIT_BRANCH}

            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY

            mkdir -p ./environments
            touch ./environments/${CI_COMMIT_BRANCH}.tfvars
            echo >> ./environments/${CI_COMMIT_BRANCH}.tfvars

            export params_candidate=$(aws ssm get-parameters --names "/cicd/account/tfvars/${CI_COMMIT_BRANCH}" --with-decryption --query "Parameters[0].Value" --output text)

            if [ "${params_candidate}" != "null" ] && [ "${params_candidate}" != "None" ]; then
              aws ssm get-parameters --names "/cicd/account/tfvars/${CI_COMMIT_BRANCH}" --with-decryption --query "Parameters[0].Value" --output text >> ./environments/${CI_COMMIT_BRANCH}.tfvars

            else
              export params_candidate=$(aws ssm get-parameters --names "/cicd/account/tfvars" --with-decryption --query "Parameters[0].Value" --output text)

              if [ "${params_candidate}" != "null" ] && [ "${params_candidate}" != "None" ]; then
                aws ssm get-parameters --names "/cicd/account/tfvars" --with-decryption --query "Parameters[0].Value" --output text >> ./environments/${CI_COMMIT_BRANCH}.tfvars
              fi
            fi

            export region_candidate=$(aws ssm get-parameters --names "/cicd/account/region/${CI_COMMIT_BRANCH}" --with-decryption --query "Parameters[0].Value" --output text)

            if [ "${region_candidate}" != "null" ] && [ "${region_candidate}" != "None" ]; then
              export AWS_DEFAULT_REGION=${region_candidate}

            else
              export region_candidate=$(aws ssm get-parameters --names "/cicd/account/region" --with-decryption --query "Parameters[0].Value" --output text)

              if [ "${region_candidate}" != "null" ] && [ "${region_candidate}" != "None" ]; then
                export AWS_DEFAULT_REGION=${region_candidate}
              fi
            fi

            sudo chown -R $(whoami):$(whoami) ./tfplan.json

            sudo chmod -R 777 ./tfplan.json

            terraform init -force-copy -input=false -backend-config bucket="lugui-terraform-states-${CI_COMMIT_BRANCH}" -backend-config dynamodb_table="lugui-terraform-states-${CI_COMMIT_BRANCH}" -backend-config shared_credentials_file=~/.aws/credentials -backend-config profile=${CI_COMMIT_BRANCH} -backend-config region=${AWS_DEFAULT_REGION}

            terraform workspace select ${CI_COMMIT_BRANCH}

            terraform apply -auto-approve -input=false tfplan.json